[metadata]
name = cs2qif
version = attr: cs2qif.__version__
author = Edoardo Di Matteo
author-email = edoardo.dimatteo@gmail.com
home-page = https://github.com/edimatt/cs2qif
description = Credit Suisse csv to qif converter
long-description = file: README.md
long_description_content_type = text/markdown; charset=UTF-8
license = MIT
license-file = COPYING
platform = any
keywords = 
    qif
    converter
classifiers =
    Development Status :: 3 - Alpha
    Intended Audience :: End Users/Desktop
    License :: OSI Approved :: MIT License
    Operating System :: OS Independent
    Programming Language :: Python
    Programming Language :: Python :: 3.4
    Programming Language :: Python :: 3.5
    Programming Language :: Python :: 3.6
    Programming Language :: Python :: 3.7
    Programming Language :: Python :: 3.8
    Topic :: Software Development :: Libraries :: Python Modules
project_urls = 
    Bug Tracker = https://github.com/edimatt/CS2qif/issues

[options]
zip_safe = false
include_package_data = true
python_requires = >= 2.7, != 3.0.*, != 3.1.*, != 3.2.*
packages = cs2qif
# package_dir = 
#    =src
setup_requires =
    setuptools
    # setuptools >=30.3.0     # minimal version for `setup.cfg`
    # setuptools >=38.3.0     # version with most `setup.cfg` bugfixes
install_requires =
    chardet
test_suite = tools.tests
tests_require =
    green
#    pytest-cov

[aliases]
test = green

[options.packages.find]
# where = src
# Exclude specific packages
exclude =
    docs
    cs2qif.tests

[options.entry_points]
console_scripts = 
    cs2qif = cs2qif.QifConverter:main

[options.extras_require]
# mysql =
#     mysql-connector

[options.package_data]
cs2qif = categories.json

[bdist_wheel]
universal = true

[check]
metadata = true
restructuredtext = true
strict = true

[sdist]
formats = zip, gztar

[coverage:report]
show_missing = true
exclude_lines =
    pragma: no cover
    if False
    # @abc.abstractmethod
    # @abc.abstractproperty
    # raise NotImplementedError
    # return NotImplemented
    # except ImportError
    # raise MemoryError
    # if __name__ == .__main__.:
    # if typing.TYPE_CHECKING:

[green]
file-pattern = test_*.py
verbose = 3
no-skip-report = true
quiet-stdout = true
run-coverage = true
minimum-coverage = 80

[pydocstyle]
match-dir = (?!tests)(?!resources)(?!docs)[^\.].*
match = (?!test)(?!setup)[^\._].*\.py
inherit = false
ignore = D200, D203, D213, D406, D407   # Google conventions
    
[flake8]
max-line-length = 90
doctests = True
exclude =  .git, .eggs, __pycache__, tests/, docs/, build/, dist/
# E203 and W503 have edge cases handled by black
# extend-ignore = E203, W503

[isort]
multi_line_output=3
include_trailing_comma=True
force_grid_wrap=0
use_parentheses=True
line_length=80

[mypy]
disallow_any_decorated = true
disallow_any_generics = true
disallow_any_unimported = false
disallow_subclassing_any = false
disallow_untyped_calls = true
disallow_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_return_any = true

[build_sphinx]
# Options for Sphinx build
source_dir = docs
build_dir = build/sphinx

[tool:pytest]
testpaths = 
    tools/tests
log_file = /tmp/py.tests
log_level = DEBUG
log_cli = True
log_cli_level = CRITICAL
addopts = --exitfirst --no-cov-on-fail --cov-fail-under=80 --cov-report html --cov-report term

[tox:tox]
envlist = py38
toxworkdir = /tmp/.tox
# skipsdist = True

[testenv]
passenv = HOME
deps =
#    pytest
#    pytest-cov
    green
    flake8
    black
    isort
# whitelist_externals = /usr/bin/cd
commands = 
    {envbindir}/isort cs2qif
    {envbindir}/black cs2qif
    {envbindir}/flake8 cs2qif
    # {envbindir}/python setup.py clean --all build install
    # {envbindir}/python setup.py test
    # {envbindir}/pytest --cov=tools.Math
    {envbindir}/green cs2qif
